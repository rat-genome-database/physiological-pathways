<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" width="400" height="288" xmlns:degrafa="com.degrafa.*"
				creationComplete="init()" xmlns:controls="edu.mcw.hmgc.rgd.ui.controls.*"
				close="titlewindow1_closeHandler(event)" showCloseButton="false" title="Processes" backgroundAlpha=".8"
				borderThicknessLeft="1" borderThicknessRight="1" headerHeight="15" horizontalScrollPolicy="off"
				verticalScrollPolicy="off">
	<mx:Script>
		<![CDATA[
			import caurina.transitions.Tweener;
			
			import edu.mcw.hmgc.rgd.diagrammer.Link;
			import edu.mcw.hmgc.rgd.utils.libraries.LinkLibrary;
			
			import mx.core.Application;
			import mx.core.mx_internal;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.HeaderEvent;
			
			import org.alivepdf.links.InternalLink;
			
			private var _processList:XMLList;

			private var _maxLines:Number = 7;
			private var _topMargin:Number = 15;
			
			private var _window : UIComponent;  
			private var _originalWidth : Number;  
			private var _originalHeight : Number;  
			private var _mouseDownPosition : Point;  

			public function get processList():XMLList
			{
				return _processList;
			}

			public function set processList(value:XMLList):void
			{
				_processList = value;
				var num_ele:Number = value[0].relationship.length();
				height =_topMargin + (num_ele >_maxLines ? (_maxLines + 1) * LinkLibrary.yStep : LinkLibrary.yStep * num_ele); 
			}

			public function init():void
			{
				LinkLibrary.drawAllLinks(surface, canvas, processList);

				titleBar.buttonMode = true; 
				titleBar.useHandCursor = true; 
				titleTextField.mouseEnabled = false; 
				
				// Slide-in the popup
				var dest_x:Number = x - width;
				alpha = 0;
				Tweener.addTween(this, {alpha:1, x:dest_x, time:1});
			}
			
			protected function titlewindow1_closeHandler(event:CloseEvent):void
			{
				// Fade out the popup
				Tweener.addTween(this, {alpha:0, time:1, onComplete:closeWindow});
			}
			
			protected function closeWindow():void
			{
				PopUpManager.removePopUp(this);
			}
			
			private function onResizeMouseDown( event : MouseEvent ) : void  
			{  
				// 1. set _window  
				_window = UIComponent( UIComponent( event.currentTarget ).parent );  
				
				// 2. add mouse move and mouse up event listeners  
				systemManager.addEventListener( MouseEvent.MOUSE_MOVE, onResizeMouseMove, true );  
				systemManager.addEventListener( MouseEvent.MOUSE_UP, onResizeMouseUp, true );                                    
				
				// 3. save original width, height, rotation  
				_originalWidth = _window.width;  
				_originalHeight = _window.height;     
				
				// 4. save mouse down position  
				_mouseDownPosition = new Point( event.stageX, event.stageY );  
			}  
			
			private function onResizeMouseMove( event : MouseEvent ) : void  
			{  
				// 1. prevent any other mouse up events to happen  
				event.stopImmediatePropagation();  
				
				// 2. calculate new width, height  
				var newWidth:Number = _originalWidth + ( event.stageX - _mouseDownPosition.x );  
				var newHeight:Number = _originalHeight + ( event.stageY - _mouseDownPosition.y );             
				
				// 3. resize window  
				width = newWidth;
				height = newHeight;
				canvas.width = newWidth;
			}  
			
			private function onResizeMouseUp( event : MouseEvent ) : void  
			{  
				// 1. prevent any other mouse up events to happen  
				event.stopImmediatePropagation();     
				
				// 2. remove event listeners  
				this.systemManager.removeEventListener( MouseEvent.MOUSE_MOVE, onResizeMouseMove, true );  
				this.systemManager.removeEventListener( MouseEvent.MOUSE_UP, onResizeMouseUp , true );  
			}  
			
			private function doDrawTriangle( event : FlexEvent ) : void  
			{  
				var uiComp : UIComponent = UIComponent( event.currentTarget );  
				
				uiComp.graphics.clear();  
				uiComp.graphics.beginFill( 0x033EFF );  
				uiComp.graphics.moveTo( uiComp.width, 0 );  
				uiComp.graphics.lineTo( uiComp.width, uiComp.height );  
				uiComp.graphics.lineTo( 0, uiComp.height );  
			}  

			public function slideTo(dest_x:int, dest_y:int):void
			{
				// Slide-in the popup
				//				alpha = 0;
				
				Tweener.addTween(this, {x:dest_x, y:dest_y, time:1});
			}
		]]>
	</mx:Script>
	<controls:Canvas id="canvas" x="0" y="0" horizontalScrollPolicy="off"
					 verticalScrollPolicy="auto" height="100%" width="100%"
					 vScrollBarLeft="false">
		<degrafa:Surface id="surface" x="0" y="0" width="100%" height="100%">
		</degrafa:Surface>
	</controls:Canvas>
	<!-- Resize triangle -->  
	<mx:UIComponent 
		alpha=".7"
		x="{ width - 19 }" y="{ height - 35 }"  
		width="15" height="15"  
		creationComplete="doDrawTriangle( event )"  
		mouseDown="onResizeMouseDown( event )" buttonMode="true" useHandCursor="true" />  
	
</mx:TitleWindow>
