<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" width="510" xmlns:degrafa="com.degrafa.*"
				creationComplete="init()" xmlns:controls="edu.mcw.hmgc.rgd.ui.controls.*"
				close="titlewindow1_closeHandler(event)" showCloseButton="true" backgroundAlpha=".1"
				borderThicknessLeft="1" borderThicknessRight="1"
				borderThicknessTop="5"  headerHeight="15" headerColors="[#FFFFFF,#000000]" 
				height="520"
				horizontalScrollPolicy="off"
				move="titlewindow1_moveHandler(event)" verticalScrollPolicy="off" title="Edit Links">
	
	
	<mx:Script>
		<![CDATA[
			import caurina.transitions.Tweener;
			
			import com.famfamfam.silk.IconLibrary;
			
			import edu.mcw.hmgc.rgd.diagrammer.Diagram;
			import edu.mcw.hmgc.rgd.graphics.ShowHideEffects;
			import edu.mcw.hmgc.rgd.ui.controls.HTMLToolTips;
			import edu.mcw.hmgc.rgd.ui.controls.ListItemRender;
			
			import mx.collections.CursorBookmark;
			import mx.collections.HierarchicalCollectionView;
			import mx.collections.HierarchicalData;
			import mx.collections.IViewCursor;
			import mx.controls.Alert;
			import mx.controls.ToolTip;
			import mx.controls.listClasses.ListItemRenderer;
			import mx.effects.effectClasses.HideShowEffectTargetFilter;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			import mx.events.MoveEvent;
			import mx.events.ToolTipEvent;
			import mx.managers.PopUpManager;
			import mx.managers.ToolTipManager;
			import mx.rpc.events.HeaderEvent;
			
			private var _linkXML:XML;

			private var _workingDiagram:Diagram;

			public function get workingDiagram():Diagram
			{
				return _workingDiagram;
			}

			public function set workingDiagram(value:Diagram):void
			{
				_workingDiagram = value;
				linkXML = value.links;
			}

			
			public function get linkXML():XML
			{
				return _linkXML;
			}

			public function set linkXML(value:XML):void
			{
				if (value == null) value = new XML("<links/>");
				_linkXML = value.copy();
				if (_linkXML != null)
				{
					linkHierarchy = new HierarchicalData(_linkXML.link_group);
				}
			}
			
			private var _linkHierarchy:HierarchicalData;

			[Bindable]
			public function get linkHierarchy():HierarchicalData
			{
				return _linkHierarchy;
			}

			public function set linkHierarchy(value:HierarchicalData):void
			{
				_linkHierarchy = value;
			}

			protected var  _singleToolTip:ToolTip;
			
			[Bindable]
			protected var _tooltipLocked:Boolean = true;
			
			public function init():void
			{
				titleBar.buttonMode = true; 
				titleBar.useHandCursor = true; 
				titleTextField.mouseEnabled = false; 
				
				// Slide-in the popup
				//				var dest_x:Number = x - width;
				//				alpha = 0;
				//				Tweener.addTween(this, {alpha:1, x:dest_x, time:1});
				
				//				// Slide-in the popup
				x = -width;
				var dest_x:Number = 5;
				alpha = 0;
				Tweener.addTween(this, {alpha:1, x:dest_x, time:1});
			}
			
			protected function titlewindow1_closeHandler(event:CloseEvent):void
			{
				// Fade out the popup
				Tweener.addTween(this, {alpha:0, time:1, onComplete:closeWindow});
			}
			
			protected function closeWindow():void
			{
				PopUpManager.removePopUp(this);
			}
			
			protected function hideTooltipCloseButton(event:Event=null):void
			{
				if (_singleToolTip == null) return;
				ShowHideEffects.hideFadeOut((_singleToolTip.getChildAt(0) as HTMLToolTips).closeButton);
			}
			
			protected function showTooltipCloseButton(event:Event=null):void
			{
				if (_singleToolTip == null) return;
				ShowHideEffects.showFadeIn((_singleToolTip.getChildAt(0) as HTMLToolTips).closeButton);
			}
			
			public override function set visible(value:Boolean):void
			{
				super.visible = value;
			}
			
			protected function titlewindow1_moveHandler(event:MoveEvent):void
			{
				if (_singleToolTip != null)
				{
					_singleToolTip.move(_singleToolTip.x + (event.target.x - event.oldX),
						_singleToolTip.y + (event.target.y - event.oldY));
				}
			}
			

			protected function buttonOK_clickHandler(event:MouseEvent):void
			{
				_workingDiagram.links = _linkXML;
				this.dispatchEvent(new CloseEvent("close"));
			}


			protected function buttonCancel_clickHandler(event:MouseEvent):void
			{
				this.dispatchEvent(new CloseEvent("close"));
			}


			protected function buttonAdddFolder_clickHandler(event:MouseEvent):void
			{
				var item:XML = linkDataGrid.selectedItem as XML;
				var view:HierarchicalCollectionView = linkDataGrid.dataProvider as HierarchicalCollectionView;
				var iterator:IViewCursor = view.createCursor();
				iterator.seek(CursorBookmark.FIRST, linkDataGrid.selectedIndex);
				if (item.name() == "link") 
				{
//					view. view.getParentItem(iterator.current)
					
				} else
				{
					iterator.insert(<link_group label="new group"><link label="new link" url="http://rgd.mcw.edu"/></link_group>);
				}
				
//				_linkXML.insertChildAfter(_linkXML.link_group[0], <link_group label="new group"><link label="new link" url="http://rgd.mcw.edu"/></link_group>);
			}


			protected function buttonDelete_clickHandler(event:MouseEvent):void
			{
				var view:HierarchicalCollectionView = linkDataGrid.dataProvider as HierarchicalCollectionView;
				var iterator:IViewCursor = view.createCursor();
				iterator.seek(CursorBookmark.FIRST, linkDataGrid.selectedIndex);
				iterator.remove();
//				var parent_obj:Object = view.getParentItem(iterator.current);
//				view.removeChild(parent_obj, iterator.current);
			}


			protected function buttonAddItem_clickHandler(event:MouseEvent):void
			{
				var item:XML = linkDataGrid.selectedItem as XML;
				var view:HierarchicalCollectionView = linkDataGrid.dataProvider as HierarchicalCollectionView;
				if (view.length == 0) 
				{
					view.addChild(null, <link_group label="new group"><link label="new link" url="http://rgd.mcw.edu"/></link_group>);
					return;
				} else
				{
					if (item == null) return;
					var iterator:IViewCursor = view.createCursor();
					if (item.name() == "link_group")
					{
						iterator.seek(CursorBookmark.LAST);
						var parent_item:Object = view.getParentItem(iterator.current);
						do {
							iterator.movePrevious(); 
							var current_item:XML = iterator.current as XML;
						} while (current_item.name() != "link_group");
						iterator.insert(<link_group label="new group"><link label="new link" url="http://rgd.mcw.edu"/></link_group>);
					} else
					{
						iterator.seek(CursorBookmark.FIRST, linkDataGrid.selectedIndex);
						view.addChild(view.getParentItem(iterator.current), <link label="new link" url="http://rgd.mcw.edu"/>);
					}
					
				}
			}

		]]>
	</mx:Script>
	<mx:AdvancedDataGrid id="linkDataGrid" dataProvider="{linkHierarchy}"
						 width="100%"
						 height="473"
						 displayItemsExpanded="true" editable="true" x="0" y="-5">
		<mx:columns>
			<mx:AdvancedDataGridColumn dataField="@label"
									   headerText="Label" width="150"/>
			<mx:AdvancedDataGridColumn dataField="@url"
									   headerText="URL"/>
		</mx:columns>
	</mx:AdvancedDataGrid>
	<mx:Button x="361" y="476" label="OK" id="buttonOK" click="buttonOK_clickHandler(event)"/>
	<mx:Button x="435" y="476" label="Cancel" id="buttonCancel" click="buttonCancel_clickHandler(event)"/>
	<mx:Button x="221" y="476" id="buttonDelete" icon="{IconLibrary.DELETE}" toolTip="Delete current entry" click="buttonDelete_clickHandler(event)"/>
	<mx:Button x="105" y="476" id="buttonAddItem" icon="{IconLibrary.TEXTFIELD_ADD}" toolTip="Add an item" click="buttonAddItem_clickHandler(event)"/>
<!--	<mx:Button x="25" y="476" id="buttonAdddFolder" icon="{IconLibrary.FOLDER_ADD}" toolTip="Add a folder" click="buttonAdddFolder_clickHandler(event)"/>
-->
</mx:TitleWindow>
